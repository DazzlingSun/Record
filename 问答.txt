
多数据源的切换，我们这边是另一种思路，没有使用代理，而是从切库的方向入手的。。

如 查询A库的某张表
try{
// 1、切换数据源链接，切到A库
// 2、执行具体的查询方法
}catch(Exception e){}
finally(){
// 3、业务执行完毕之后，切换到公共库
}


如 查询B库的某张表
try{
// 1、切换数据源链接，切到B库
// 2、执行具体的查询方法
}catch(Exception e){}
finally(){
// 3、业务执行完毕之后，切换到公共库
}


就是说： 至少要存在 A库 + 公共库 或 B库+公共库的部署情况，至于事务完整性，可以把整个查询A库，查询B库业务放在一个事务里面，用spring+atomikos+jta事务管理实现。。。


当然这确实增加了代码开发的复杂性，也增加了业务理解的难度，但是从维护方面来说，也减少了新人和老人便于接受和理解。