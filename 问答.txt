
多数据源的切换，我们这边是另一种思路，没有使用代理，而是从切库的方向入手的。。

如 查询A库的某张表
try{
// 1、切换数据源链接，切到A库
// 2、执行具体的查询方法
}catch(Exception e){}
finally(){
// 3、业务执行完毕之后，切换到公共库
}


如 查询B库的某张表
try{
// 1、切换数据源链接，切到B库
// 2、执行具体的查询方法
}catch(Exception e){}
finally(){
// 3、业务执行完毕之后，切换到公共库
}


就是说： 至少要存在 A库 + 公共库 或 B库+公共库的部署情况，至于事务完整性，可以把整个查询A库，查询B库业务放在一个事务里面，用spring+atomikos+jta事务管理实现。。。


当然这确实增加了代码开发的复杂性，也增加了业务理解的难度，但是从维护方面来说，也减少了新人和老人便于接受和理解。



web的话，只能客户端页面轮训处理结果。
因为，据我个人了解啊，现在web没有成熟的向客户端推送处理结果的技术。或者是我没弄好，如果有知道的，还望提点下。


activemq解决高并发：

问：最近了解到用mq解决高并发问题
自己也用过activemq，并不精通，想来想去有个问题
假如大量访问冲进来，servlet做client把请求发给activemq，发给服务处理端，解决高并发问题
但是服务处理完，响应怎么办呢
难道作为client的servlet ，也订阅一个响应队列么，等服务在发回来
觉得这样的话，高并发问题是解决了，但是会不会很慢

答：用mq来将耗时比较长或者耗费资源的请求排队，异步处理，减轻服务器压力增加稳定性。
如果是高并发的实时请求，我个人觉得不适用这个方案。如果是为了高并发，我觉得应该朝解决高并发的方向考虑。集群、分布式、动静分离、数据库读写分离之类的。
